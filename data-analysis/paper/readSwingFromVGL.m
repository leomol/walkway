%% Read VGL's output files "*InStance.txt".
% Search swing/stance detection files generated by VGL.
% Combine into a single mat file with information extracted from the filename.

% 2023-07-31. Leonardo Molina.
% 2023-08-16. Last modified.

%% Configuration.
config = struct();
config.inputFolder = 'W:/Walkway/Walkway paper/VGL/results';
config.outputFolder = 'W:\Walkway\Walkway paper\output\post-revisions\results from handpicked clips';

config.framerate = 170;
config.strideCriteria = 'stance';

% Output filename to export both mat and csv files.
basename = 'gaitDataVGL';
    
% data fields to exclude from exporting.
exclude = {'path', 'sex', 'group', 'id', 'single', 'FLP', 'FRP', 'BLP', 'BRP'};
    
% Format.
formatter = {'uid', @(x) ['#' x]};

%% Search recursively for VGL's output files called "gaitsavedstate/...InStance.txt".

glob = '*/*/analyzed-videos/*/gaitsavedstate/*InStance.txt';
files = dir(fullfile(config.inputFolder, glob));
paths = fullfile({files.folder}, {files.name})';
nPaths = numel(paths);

% Get identifiers from filenames.
[uid, prefix, group, id, sex, single, free] = getInfo(paths);
data = struct('uid', uid(1:4:end), 'prefix', prefix(1:4:end), 'id', num2cell(id(1:4:end)), 'sex', num2cell(sex(1:4:end)), 'single', num2cell(single(1:4:end)), 'free', num2cell(free(1:4:end)), 'group', num2cell(group(1:4:end)));

%% Load all data. Files are always grouped in 4 and ordered as FL, FR, BL, BR.
nSessions = nPaths / 4;
for i = 1:nSessions
    data(i).FLP = readSwing(paths{4 * i - 3});
    data(i).FRP = readSwing(paths{4 * i - 2});
    data(i).BLP = readSwing(paths{4 * i - 1});
    data(i).BRP = readSwing(paths{4 * i - 0});
    fprintf('[%04d:%04d] "%s"\n', i, nSessions, uid{4 * i});
end

%% Calculate mean swing and stance duration.
for i = 1:nSessions
    % Get swing and stance periods.
    [FLW, FLC] = phases2strides(data(i).FLP, config.strideCriteria, true);
    [FRW, FRC] = phases2strides(data(i).FRP, config.strideCriteria, true);
    [BLW, BLC] = phases2strides(data(i).BLP, config.strideCriteria, true);
    [BRW, BRC] = phases2strides(data(i).BRP, config.strideCriteria, true);

    % Swing and stance duration.
    swingDuration = [mean(diff(FLW)), mean(diff(FRW)), mean(diff(BLW)), mean(diff(BRW))] / config.framerate;
    stanceDuration = [mean(diff(FLC)), mean(diff(FRC)), mean(diff(BLC)), mean(diff(BRC))] / config.framerate;

    data(i).swingDuration = swingDuration;
    data(i).stanceDuration = stanceDuration;
end

% Create output folder.
if config.outputFolder
    parent = config.outputFolder;
    if exist(parent, 'dir') ~= 7
        mkdir(parent);
    end
else
    parent = '.';
end

% Save mat file with all data.
filename = fullfile(parent, sprintf('%s.mat', basename));
save(filename, 'data', 'config');
    
% Split into separate columns variables with multiple values.
tbl = tables.convert(data, {'X', 'Y'}, {'FL', 'FR', 'BL', 'BR'});

[~, include] = setdiff(tbl.Properties.VariableNames, exclude, 'stable');
% Format variables.
tbl = tables.format(tbl(:, include), formatter{:});
filename = fullfile(parent, sprintf('%s.csv', basename));
writetable(tbl, filename);
    
% Export a csv file with the mean of numeric data grouped by the grouping variable.
meanTbl = tables.group(tbl, groupVariables, @mean);
filename = fullfile(parent, sprintf('%s-mean.csv', basename));
writetable(meanTbl, filename);

%% Helper functions.
function data = readSwing(path)
    fid = fopen(path);
    data = textscan(fid, '%d8', 'Delimiter', '\n');
    data = data{1} == 0;
    fclose(fid);
end